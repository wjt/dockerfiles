#!/usr/bin/env python3
import argparse
import logging
import os
import requests
import shlex
import subprocess
import tempfile

from dataclasses import dataclass


LOG = logging.getLogger(os.path.basename(__file__))


@dataclass
class Format:
    suffixes: frozenset[str]
    command: tuple[str]

    def matches(self, name: str) -> bool:
        return any(name.endswith(suffix) for suffix in self.suffixes)


FORMATS = {
    "deb": Format(
        suffixes=frozenset({"x86_64.deb", "amd64.deb"}),
        command=("env", "DEBIAN_FRONTEND=noninteractive", "apt-get", "install", "--no-install-recommends", "-y"),
    ),
    "tar": Format(
        suffixes=frozenset({"x86_64-unknown-linux-musl.tar.gz"}),
        command=("tar", "-C", "/usr/local/bin", "-xf"),
    ),
}


def find_url_github(args):
    response = requests.get(f"https://api.github.com/repos/{args.repo}/releases/latest")
    response.raise_for_status()
    assets = response.json()["assets"]
    for asset in assets:
        if FORMATS[args.format].matches(asset["name"]):
            LOG.debug("Matched asset %s", asset)
            return asset["browser_download_url"]

    raise ValueError(", ".join(x["name"] for x in assets))


def find_url_gitlab(args):
    # TODO: use real urlescape
    project_id = args.repo.replace("/", "%2F")
    response = requests.get(
        f"https://{args.instance}/api/v4/projects/{project_id}/releases/"
    )
    response.raise_for_status()
    assets = response.json()[0]["assets"]["links"]

    for asset in assets:
        if FORMATS[args.format].matches(asset["name"]):
            return asset["direct_asset_url"]

    raise ValueError(", ".join(x["name"] for x in assets))


def main():
    logging.basicConfig(level=logging.INFO)

    parser = argparse.ArgumentParser()
    parser.add_argument("--format", choices=FORMATS.keys())
    subparsers = parser.add_subparsers(required=True)

    github_parser = subparsers.add_parser("github", help="Fetch from GitHub")
    github_parser.set_defaults(func=find_url_github)
    github_parser.add_argument("repo")

    gitlab_parser = subparsers.add_parser("gitlab", help="Fetch from a GitLab instance")
    gitlab_parser.set_defaults(func=find_url_gitlab)
    gitlab_parser.add_argument("instance")
    gitlab_parser.add_argument("repo")

    args, rest = parser.parse_known_args()

    url = args.func(args)
    LOG.info("Fetching %s", url)

    with tempfile.NamedTemporaryFile(suffix=os.path.splitext(url)[1]) as t:
        subprocess.run(("wget", "--no-verbose", "-O", t.name, url), check=True)
        command = FORMATS[args.format].command + (t.name,) + tuple(rest)
        LOG.info("$ %s", shlex.join(command))
        subprocess.run(command, check=True)


if __name__ == "__main__":
    main()
